---
# An example configuration file detailing all options that can be set.
# The layout is strongly intended to mimic the graphical menus that expose these settings.

# This can be found not in 'Settings...' but under 'Project Structure...'
Project Settings:
  Project:
    Project name: project-name-in-intellij
    Project SDK: ProjectSDK
    Project language level: '8'
  Modules:
    - Name: my-module
      Sources:
        # If relative, this will be evaluated with respect to the project.
        - Content Root: path/to/module
          # Note that folders listed here are merely appended to the existing list;
          # we do NOT clear out all folders first.
          Sources:
            - src/main/kotlin
          Tests:
            - src/it/java
          Resources:
            - src/main/other_resources
          Test Resources:
            - src/test/other_resources
          Excluded:
            - src/main/resources/too_large_to_index

Editor:
  Code Style:
    Java:
      Wrapping and Braces:
        Hard wrap at: 120
        Wrap on typing: true
        Keep when reformatting:
          Multiple expressions in one line: true
          Simple blocks in one line: true
          Simple methods in one line: true
          Simple lambdas in one line: true
          Simple classes in one line: true
        Extends/implements list:
          Align when multiline: true
        Method declaration parameters:
          Wrapping: Wrap if long
        if() statement:
          Force braces: Always
        for() statement:
          Force braces: Always
        while() statement:
          Force braces: Always
        do ... while() Statement:
          Force braces: Always
        try-with-resources:
          Wrapping: Wrap always
        Binary expressions:
          Wrapping: Chop down if long
          Align when multiline: true
        Assignment statement:
          Wrapping: Do not wrap
        Ternary operation:
          Wrapping: Wrap if long
        Array initializer:
          Wrapping: Wrap if long
        Assert statement:
          Wrapping: Wrap if long
        Parameter annotations:
          Wrapping: Do not wrap
        Local variable annotations:
          Wrapping: Wrap if long
        Annotation parameters:
          Wrapping: Wrap if long
          Align when multiline: true
      Blank Lines:
        Keep Maximum Blank Lines:
          In declarations: 10
          In code: 11
          Before '}': 12
          Between header and package: 13
        Minimum Blank Lines:
          Before package statement: 14
          After package statement: 15
          Before imports: 16
          After imports: 17
          Around class: 18
          After class header: 19
          Before class end: 20
          After anonymous class header: 21
          Around field in interface: 22
          Around field: 23
          Around method in interface: 24
          Around method: 25
          Before method body: 26
          Around initializer: 27
      JavaDoc:
        Alignment:
          Align parameter descriptions: false
          Align thrown exception descriptions: false
        Blank lines:
          After description: false
          After parameter descriptions: true
          After return tag: true
        Invalid tags:
          Keep invalid tags: false
          Keep empty @param tags: false
          Keep empty @return tags: false
          Keep empty @throws tags: false
        Other:
          Wrap at right margin: true
          Enable leading asterisks: false
          Use @throws rather than @exception: false
          Generate '<p>' on empty lines: false
          Keep empty lines: false
          Do not wrap one line comments: true
          Preserve line feeds: true
          Parameter descriptions on new line: true
          Indent continuation lines: true
      Imports:
        Class count to use import with '*': 999
        Names count to use static import with '*': 999
      Arrangement:
        Matching rules:
          - Type: field
            Modifier:
              - public
              - static
              - final
            Name: matchingRule
            Order: keep order
          - Type: field
            Modifier:
              - private
              - not static
            Name: my rule
            Order: order by name
    JavaScript:
      Imports:
        Use paths relative to the project, resource or sources roots: true
  General:
    Auto Import:
      Java:
        Optimize imports on the fly (for current project): true
        Exclude from import and completion:
          - com.google.inject.Inject
          - com.sun.istack.internal.Nullable
          - edu.umd.cs.findbugs.annotations.Nullable
  Spelling:
    Dictionaries:
      # files containing a word on each line to be used as custom spelling dictionaries.
      - relative_to_project.dic
      - /tmp/absolute.dic

Build, Execution, Deployment:
  Build Tools:
    Maven:
      Importing:
        VM options for importer: -Xmx1g
      Maven home directory: /usr
  Compiler:
    Resource patterns:
      - '!?*.java'
      - '!resource.properties'
    Add runtime assertions for notnull-annotated methods and parameters: false
    Build process heap size (Mbytes): 1024
    Compile independent modules in parallel: true
    Rebuild module on dependency change: false
    Shared build process VM options: -Xms123m
  Required plugins:
    - Plugin: CheckStyle-IDEA
      Minimum version: 5.23.0
      Maximum version: 5.24.1

Languages & Frameworks:
  JavaScript:
    JavaScript language version: React JSX
  SQL Dialects:
    Project SQL Dialect: PostgreSQL

Tools:
  File Watchers:
    - Name: Prettier
      Files to watch:
        File type: JavaScript
        Scope: Project Files
      Tool to Run on Changes:
        Program: $ProjectFileDir$/node_modules/.bin/prettier
        Arguments: --write $FilePath$
        Output paths to refresh: $FilePath$
      Advanced Options:
        Auto-save edited files to trigger the watcher: false
        Trigger the watcher on external changes: true
        Trigger the watcher regardless of syntax errors: true

Other Settings:
  Checkstyle:
    Checkstyle version: "8.16"
    # Manages the files that Checkstyle verifies. Can be one of:
    # - Only Java sources (but not tests)
    # - Only Java sources (including tests)
    # - All sources (but not tests)
    # - All sources (including tests)
    # - All files in project
    Scan Scope: Only Java sources (including tests)
    Treat Checkstyle errors as warnings: false
    Configuration files:
      - Active: true
        Description: Project Checkstyle Configuration
        # Can be one of:
        # - a local file
        # - an HTTP URL
        # - 'bundled' (with description matching the bundled description, e.g. "Google Checks")
        File: checkstyle.xml

# Run / Debug configurations
Configurations:
  - Application:
      Name: My Application
      Share through VCS: true
      Configuration:
        Main class: com.Application
        Use class path of module: app
        VM options: -Xmx1g
        Program arguments: arg1 arg2
        Working directory: .
  - Docker Image:
      Name: Run Container
      Share through VCS: true
      Image ID: hello-world
      Container name: my-hello-world-container
      Executable:
        Entrypoint: /bin/bash
        Command: -c echo bar
      Bind ports:
        - Host port: 1234
          Container port: 5678
          Protocol: tcp
          Host IP: 1.2.3.4
      Environment variables:
        - Name: foo
          Value: bar
      Run options: --tty -it
  - Remote:
      name: Debug
      Share through VCS: true
      Configuration:
        Host: localhost
        Port: 5005
  - Shell Script:
      Name: Script
      Share through VCS: true
      Script path: ./foo.sh
      Script options: arg1 arg2
      Interpreter:
        Interpreter path: /bin/sh
        Interpreter options: -e
  - Spring Boot:
      Name: Spring Boot Application
      Configuration:
        Main class: com.application.MyApplication
        Environment:
          VM options: -Xmx123m
          Include dependencies with provided scope: false
          Use class path of module: my-module
        Spring Boot:
          Override parameters:
            - Name: system.property
              Value: value
        Before launch:
          - Build: {}
            Run Another Configuration:
              Name: Run Container # For now, configuration in 'name' must be defined before this one.
              Type: Docker # Only necessary to specify in the event of two configurations sharing the same name.
            Run Maven Goal:
              Working directory: .
              Command line: checkstyle:check
